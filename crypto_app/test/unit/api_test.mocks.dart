// Mocks generated by Mockito 5.3.2 from annotations
// in crypto_app/test/unit/api_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:chopper/chopper.dart' as _i2;
import 'package:crypto_app/data/datasource/remote/CryptoApi.dart' as _i3;
import 'package:crypto_app/data/datasource/remote/dto/CurrencyDto.dart' as _i5;
import 'package:crypto_app/data/datasource/remote/dto/ExchangeRateDto.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChopperClient_0 extends _i1.SmartFake implements _i2.ChopperClient {
  _FakeChopperClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeType_1 extends _i1.SmartFake implements Type {
  _FakeType_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_2<BodyType> extends _i1.SmartFake
    implements _i2.Response<BodyType> {
  _FakeResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CryptoApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockCryptoApi extends _i1.Mock implements _i3.CryptoApi {
  MockCryptoApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChopperClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeChopperClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.ChopperClient);
  @override
  set client(_i2.ChopperClient? _client) => super.noSuchMethod(
        Invocation.setter(
          #client,
          _client,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Type get definitionType => (super.noSuchMethod(
        Invocation.getter(#definitionType),
        returnValue: _FakeType_1(
          this,
          Invocation.getter(#definitionType),
        ),
      ) as Type);
  @override
  _i4.Future<_i2.Response<List<_i5.CurrencyDto>>> fetchCurrencies() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCurrencies,
          [],
        ),
        returnValue: _i4.Future<_i2.Response<List<_i5.CurrencyDto>>>.value(
            _FakeResponse_2<List<_i5.CurrencyDto>>(
          this,
          Invocation.method(
            #fetchCurrencies,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Response<List<_i5.CurrencyDto>>>);
  @override
  _i4.Future<_i2.Response<_i6.ExchangeRateDto>> fetchExchangeRate(
          String? currencyPair) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchExchangeRate,
          [currencyPair],
        ),
        returnValue: _i4.Future<_i2.Response<_i6.ExchangeRateDto>>.value(
            _FakeResponse_2<_i6.ExchangeRateDto>(
          this,
          Invocation.method(
            #fetchExchangeRate,
            [currencyPair],
          ),
        )),
      ) as _i4.Future<_i2.Response<_i6.ExchangeRateDto>>);
  @override
  _i4.Future<_i2.Response<_i6.ExchangeRateDto>> fetchExchangeRateByDate(
    String? currencyPair,
    String? date,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchExchangeRateByDate,
          [
            currencyPair,
            date,
          ],
        ),
        returnValue: _i4.Future<_i2.Response<_i6.ExchangeRateDto>>.value(
            _FakeResponse_2<_i6.ExchangeRateDto>(
          this,
          Invocation.method(
            #fetchExchangeRateByDate,
            [
              currencyPair,
              date,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Response<_i6.ExchangeRateDto>>);
}
